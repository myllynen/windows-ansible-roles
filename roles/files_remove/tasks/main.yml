---
- name: Fail if unsafe wildcard in use
  ansible.builtin.fail:
    msg: "Refusing to expand unsafe wildcard '*'."
  when: "'*' in files_remove | default([], true) or
         'C:\\*' in files_remove | default([], true)"

- name: Fail if incorrect path format in use
  ansible.builtin.fail:
    msg: "Path must contain '\\'."
  loop: "{{ files_remove | default([], true) + files_remove_exclude | default([], true) }}"
  when: "'\\\\' not in item"

- name: Fail if incorrect exclude format in use
  ansible.builtin.fail:
    msg: "Wildcards not supported for exclusion."
  loop: "{{ files_remove_exclude | default([], true) }}"
  when: "'*' in item or '?' in item or '[' in item"

- name: Fail if incorrect wildcard pattern in use
  ansible.builtin.fail:
    msg: "Wildcards only supported for the last element."
  loop: "{{ files_remove | default([], true) | map('win_dirname') | select('search', '\\?|\\*|\\[') }}"

- name: Locate wildcard files to be removed
  ansible.windows.win_find:
    paths: "{{ item | win_dirname }}"
    patterns: "{{ item | win_basename }}"
    file_type: file
    hidden: true
    recurse: "{{ files_remove_recursive | bool }}"
  register: remove_wildcard_files
  loop: "{{ files_remove | select('search', '\\?|\\*|\\[') }}"

- name: Locate wildcard directories to be removed
  ansible.windows.win_find:
    paths: "{{ item | win_dirname }}"
    patterns: "{{ item | win_basename }}"
    file_type: directory
    hidden: true
    recurse: "{{ files_remove_recursive | bool }}"
  register: remove_wildcard_dirs
  loop: "{{ files_remove | select('search', '\\?|\\*|\\[') }}"

# Remove set paths from possible previous role execution
- name: Initialize list of wildcard files and directories
  ansible.builtin.set_fact:
    wildcard_paths: []

- name: Set wildcard files and directories to remove
  ansible.builtin.set_fact:
    wildcard_paths: "{{ wildcard_paths + item.files | map(attribute='path') }}"
  loop: "{{ remove_wildcard_files.results + remove_wildcard_dirs.results }}"
  loop_control:
    label: "{{ item.files | map(attribute='path') }}"
  when: item.files | length > 0

- name: Remove files and directories
  vars:
    plain_paths: "{{ files_remove | select | reject('search', '\\?|\\*|\\[') }}"
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  register: remove_files
  loop: "{{ (plain_paths + wildcard_paths) | select }}"
  when: item not in files_remove_exclude | default([], true)
